What happens when you initialize a repository? Why do you need to do it?
	
	Git create the structure of files inside .git folder but it make no commits.
	It seems you still have to add all the files you want to track and make a 
	first commit.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a middle ground between the repository and the working 
	directory, is different because its not any of them and his role is to make 
	you able to select what is going to be tracked for commits and so, whats 
	going to be commited.

How can you use the staging area to make sure you have one commit per logical
change?

	You first check the git diff to see what have changed, 
	then you stage the files that form a logical change, 
	then you check if thats right by git diff --status and 
	then commit the change.

	Then you repeat the process for each change that has a 
	logical entity on its own and if the rest you dont want 
	to commit and want to delete, you just do 
	git reset --hard

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	When we want to make changes in the code for a side project or some 
	experimental feature, but we want to keep the working production code also 
	to keep fixing bugs and stuff, we will make a new branch with git branch <name>.

	To go to a branch we use git checkout <branchname>

How do the diagrams help you visualize the branch structure?
	
	The diagrams are quite usefull cause you can there see with colors and 
	special characters the branches you have. You do that by using the command:
	 git log --graph --oneline master <branch1> <branch2>


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?